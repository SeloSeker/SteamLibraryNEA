import tkinter as tk
from tkinter import font, messagebox

class CustomGame:
    def __init__(self, master, steam_user, game_name):
        self.master = master
        self.steam_user = steam_user
        self.game_name = game_name
        custom_game_window = tk.Toplevel(self.master)
        custom_game_window.title(f"Custom Game Options - {self.game_name}")

        remove_game_button = tk.Button(custom_game_window, text="Remove Game", command=lambda: self.remove_game(self.game_name, custom_game_window))
        remove_game_button.pack(pady=10)
        create_achievements_button = tk.Button(custom_game_window, text="Create Achievements", command=self.open_create_achievement_dialog)
        create_achievements_button.pack(pady=10)

        view_achievements_button = tk.Button(custom_game_window, text="View Achievements", command=lambda: self.view_achievements(self.game_name, custom_game_window))
        view_achievements_button.pack(pady=10)
        stopwatch_button = tk.Button(custom_game_window, text="Start Stopwatch", command=lambda: self.open_stopwatch(self.game_name))
        stopwatch_button.pack(pady=10)

    def open_create_achievement_dialog(self):
        create_achievement_window = tk.Toplevel(self.master)
        create_achievement_window.title("Create Achievement")

        tk.Label(create_achievement_window, text="Achievement Name:").pack(pady=5)
        achievement_name_entry = tk.Entry(create_achievement_window, width=30)
        achievement_name_entry.pack(pady=5)

        tk.Label(create_achievement_window, text="Achievement Description:").pack(pady=5)
        achievement_description_entry = tk.Entry(create_achievement_window, width=30)
        achievement_description_entry.pack(pady=5)

        def on_create():
            name = achievement_name_entry.get().strip()
            description = achievement_description_entry.get().strip()

            if not name:
                messagebox.showerror("Error", "Achievement name cannot be empty!")
                return

            self.create_achievement(self.game_name, name, description)
            create_achievement_window.destroy()

        create_button = tk.Button(create_achievement_window, text="Create", command=on_create)
        create_button.pack(pady=10)

    def view_achievements(self, game_name, window):
        achievements = self.get_achievements_from_db(game_name)

        view_achievements_window = tk.Toplevel(window)
        view_achievements_window.title(f"View Achievements - {game_name}")

        total_achievements_label = tk.Label(view_achievements_window, font=font.Font(size=16),
                                            text=f"Total Achievements: {len(achievements)}")
        total_achievements_label.pack(pady=10)

        search_label = tk.Label(view_achievements_window, text="Search Achievements:")
        search_label.pack(pady=5)
        search_entry = tk.Entry(view_achievements_window, width=30)
        search_entry.pack(pady=5)

        achievements_frame = tk.Frame(view_achievements_window)
        achievements_frame.pack(pady=10)

        def load_achievements(search_term=""):
            for widget in achievements_frame.winfo_children():
                widget.destroy()

            sorted_achievements = sorted(achievements, key=lambda x: x[0].lower())

            if search_term:
                filtered_achievements = binary_search(sorted_achievements, search_term, key=lambda x: x[0])
            else:
                filtered_achievements = sorted_achievements

            for achievement in filtered_achievements:
                achievement_label = tk.Label(achievements_frame, text=f"{achievement[0]}: {achievement[1]}",
                                            wraplength=300, justify="left")
                achievement_label.pack(anchor="w", pady=5, padx=10)

        search_entry.bind("<KeyRelease>", lambda event: load_achievements(search_entry.get().strip()))

        load_achievements()

        back_button = tk.Button(view_achievements_window, text="Back", command=view_achievements_window.destroy)
        back_button.pack(pady=10)

    def open_stopwatch(self, game_name):
        stopwatch_window = tk.Toplevel()
        stopwatch_window.title(f"Stopwatch - {game_name}")
        stopwatch_running = False
        start_time = None
        elapsed_time_label = tk.Label(stopwatch_window, font=font.Font(size=14), text="")
        elapsed_time_label.pack(pady=20)

        def start_stopwatch():
            nonlocal stopwatch_running, start_time
            if not stopwatch_running:
                stopwatch_running = True
                start_time = datetime.now()
                update_stopwatch()
                activity = f"Started playing: {game_name}"
                self.steam_user.add_activity(activity)

        def stop_stopwatch():
            nonlocal stopwatch_running
            if stopwatch_running:
                stopwatch_running = False
                end_time = datetime.now()
                elapsed_seconds = int((end_time - start_time).total_seconds())
                self.update_custom_game_stats(game_name, elapsed_seconds, end_time)
                stopwatch_window.destroy()
                activity = f"Stopped playing: {game_name}"
                self.steam_user.add_activity(activity)

        def reset_stopwatch():
            elapsed_time_label.config(text="Elapsed time: 0:00")
            if stopwatch_running:
                start_time = datetime.now()
                update_stopwatch()

        def update_stopwatch():
            if stopwatch_running:
                elapsed = datetime.now() - start_time
                minutes, seconds = divmod(int(elapsed.total_seconds()), 60)
                elapsed_time_label.config(text=f"Elapsed time: {minutes:02}:{seconds:02}")
                stopwatch_window.after(1000, update_stopwatch)

        start_button = tk.Button(stopwatch_window, text="Start", command=start_stopwatch)
        start_button.pack(pady=5)
        stop_button = tk.Button(stopwatch_window, text="Stop", command=stop_stopwatch)
        stop_button.pack(pady=5)
        reset_button = tk.Button(stopwatch_window, text="Reset", command=reset_stopwatch)
        reset_button.pack(pady=5)

class AchievementsFrame(tk.Frame):
    def __init__(self, container, steam_user, game_name, schema_dict, user_achievements, friends_with_achievement):
        super().__init__(container)
        self.container = container
        self.steam_user = steam_user
        self.game_name = game_name
        self.schema_dict = schema_dict
        self.user_achievements = user_achievements
        self.friends_with_achievement = friends_with_achievement

        self.place(relx=0, rely=0, relwidth=1, relheight=1)

        self.create_widgets()

    def create_widgets(self):
        self.achievements_window_title = tk.Label(self, font=font.Font(size=30), text=f"Achievements for {self.game_name}")
        self.achievements_window_title.pack(pady=10)

        self.total_unlocked_achievements = len(self.user_achievements)
        self.total_achievements_label = tk.Label(self, font=font.Font(size=16), text=f"Achievements Unlocked: {self.total_unlocked_achievements}")
        self.total_achievements_label.pack(pady=10)

        self.search_label = tk.Label(self, text="Search Achievements:")
        self.search_label.pack(pady=5)
        self.search_entry = tk.Entry(self, width=30)
        self.search_entry.pack(pady=5)

        self.frame = tk.Frame(self)
        self.frame.pack(expand=True, fill="both", pady=10, padx=10)
        
        self.canvas = tk.Canvas(self.frame)
        self.scrollbar = tk.Scrollbar(self.frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.friend_ids = list(set(friend_id for achievement in self.friends_with_achievement.values() for friend_id in achievement))
        self.friend_summaries = self.steam_user.get_player_summaries(self.friend_ids)
        self.friend_usernames = {player['steamid']: player['personaname'] for player in self.friend_summaries}

        self.search_entry.bind("<KeyRelease>", lambda event: self.filter_achievements(self.search_entry.get().strip()))

        self.filter_achievements()

        self.close_button = tk.Button(self, text="Close", command=self.destroy)
        self.close_button.pack(pady=10)

    def filter_achievements(self, search_term=""):
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        achievements_list = [{'name': name, 'description': data.get('description', 'No description available')}
                            for name, data in self.schema_dict.items()]

        sorted_achievements = sorted(achievements_list, key=lambda x: x['name'].lower())

        if search_term:
            filtered_achievements = binary_search(sorted_achievements, search_term, key=lambda x: x['name'])
        else:
            filtered_achievements = sorted_achievements

        for achievement in filtered_achievements:
            achievement_name = achievement['name']
            description = achievement['description']
            if achievement_name in self.user_achievements:
                friends_with_this_achievement = self.friends_with_achievement.get(achievement_name, [])
                if friends_with_this_achievement:
                    friend_names = [self.friend_usernames.get(friend_id, friend_id) for friend_id in friends_with_this_achievement]
                    friends_string = ', '.join(friend_names)
                    achievement_text = f"{achievement_name}: {description}, Friends ({friends_string}) also have this achievement"
                else:
                    achievement_text = f"{achievement_name}: {description}"
            else:
                achievement_text = f"{achievement_name}: {description} (Locked)"

            frame_width = self.scrollable_frame.winfo_width()
            label = tk.Label(self.scrollable_frame, text=achievement_text, wraplength=frame_width - 20, justify="left")
            label.pack(anchor="w", pady=5, padx=10)

class Program(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry('1920x1080')
        self.frames = {}
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
        self.frames['LoginPage'] = LoginFrame(self)
        self.frames['LibraryMenu'] = LibraryFrame(self)
        self.frames['LoginPage'].grid(row=0, column=0, sticky='nsew')
        self.frames['LibraryMenu'].grid(row=0, column=0, sticky='nsew')
        self.showFrame("LoginPage")

    def showFrame(self, page_name):
        frame = self.frames[page_name]
        frame.tkraise()

class LoginFrame(tk.Frame):
    def __init__(self, container):
        super().__init__(container)
        self.container = container
        self.LoginTitle = tk.Label(self, font=font.Font(size=30), text="Steam Login")
        self.LoginTitle.place(relx=0.5, rely=0.4, anchor='center')
        self.EnterSteamAPI = tk.Label(self, font=font.Font(size=12), text="Enter your Steam API Key:")
        self.EnterSteamAPI.place(relx=0.5, rely=0.5, anchor='center')
        self.ApiInput = tk.Entry(self, width=34)
        self.ApiInput.place(relx=0.5, rely=0.52, anchor='center')
        self.EnterSteamID = tk.Label(self, font=font.Font(size=12), text='Enter your SteamID:')
        self.EnterSteamID.place(relx=0.5, rely=0.55, anchor='center')
        self.SteamIDInput = tk.Entry(self, width=34)
        self.SteamIDInput.place(relx=0.5, rely=0.57, anchor='center')
        self.LoginInput = tk.Button(self, text='Login', command=self.Login, width=10, height=1)
        self.LoginInput.place(relx=0.5, rely=0.625, anchor='center')

        steam_api_link = tk.Label(self, text="Click here", fg="blue", cursor="hand2")
        steam_api_link.place(relx=1.0, rely=1.0, anchor='se', x=-10, y=-10)
        steam_api_link.bind("<Button-1>", lambda e: webbrowser.open("https://steamcommunity.com/dev"))

class LibraryFrame(tk.Frame):
    def __init__(self, container):
        super().__init__(container)
        self.container = container
        self.activities = []
        self.activity_labels = [] 
        self.current_game = None
        self.sort_buttons_visible = False

        self.LibraryTitle = tk.Label(self, font=font.Font(size=30), text="Library")
        self.LibraryTitle.place(relx=0.5, rely=0.1, anchor='center')

        self.TotalPlaytimeLabel = tk.Label(self, font=font.Font(size=16), text="Total Playtime: 0h 0m")
        self.TotalPlaytimeLabel.place(relx=0.5, rely=0.15, anchor='center')

        self.TotalAchievementsLabel = tk.Label(self, font=font.Font(size=16), text="Total Achievements: 0")
        self.TotalAchievementsLabel.place(relx=0.5, rely=0.2, anchor='center')

        self.SearchLabel = tk.Label(self, text="Search Game:")
        self.SearchLabel.place(relx=0.5, rely=0.25, anchor='center')
        self.SearchInput = tk.Entry(self, width=30)
        self.SearchInput.place(relx=0.5, rely=0.3, anchor='center')
        self.SearchInput.bind("<KeyRelease>", self.filter_games)

        self.GameListbox = tk.Listbox(self, width=50, height=20)
        self.GameListbox.place(relx=0.5, rely=0.55, anchor='center')
        self.GameListbox.bind('<<ListboxSelect>>', self.on_select)

        self.SortButton = tk.Button(self, text="Sort", command=self.toggle_sort_options)
        self.SortButton.place(relx=0.5, rely=0.8, anchor='center')

        self.AscButton = tk.Button(self, text="Sort A-Z", command=lambda: self.sort_games_by_name(True))
        self.DescButton = tk.Button(self, text="Sort Z-A", command=lambda: self.sort_games_by_name(False))
        self.MostPlayedButton = tk.Button(self, text="Most Played", command=lambda: self.sort_games_by_playtime(False))
        self.LeastPlayedButton = tk.Button(self, text="Least Played", command=lambda: self.sort_games_by_playtime(True))
        self.RecentlyPlayedButton = tk.Button(self, text="Recently Played", command=lambda: self.sort_games_by_last_played())

        self.LogoutButton = tk.Button(self, text="Logout", command=self.logout)
        self.LogoutButton.place(relx=0.5, rely=0.9, anchor='center')

        self.RefreshButton = tk.Button(self, text="Refresh", command=self.refresh_library)
        self.RefreshButton.place(relx=0.5, rely=0.85, anchor='center')

        self.AddGameButton = tk.Button(self, text="Add New Game", command=self.add_game)
        self.AddGameButton.place(relx=0.5, rely=0.75, anchor='center')

        self.activity_frame = tk.Frame(self, width=200, bg='lightgray')
        self.activity_frame.place(relx=0, rely=0, relwidth=0.2, relheight=1)
        self.activity_title = tk.Label(self.activity_frame, text="Recent Activities", font=font.Font(size=14), bg='lightgray')
        self.activity_title.pack(pady=10)
        self.activity_list = tk.Frame(self.activity_frame, bg='lightgray')
        self.activity_list.pack(fill='both', expand=True)
        for _ in range(20):
            label = tk.Label(self.activity_list, text="", bg='lightgray', anchor='w')
            label.pack(fill='x', padx=5, pady=2)
            self.activity_labels.append(label)

        self.friends_frame = tk.Frame(self, width=200, bg='lightgray')
        self.friends_frame.place(relx=0.8, rely=0, relwidth=0.2, relheight=1)
        self.friends_title = tk.Label(self.friends_frame, text="Friends List", font=font.Font(size=14), bg='lightgray')
        self.friends_title.pack(pady=10)
        self.friends_list = tk.Frame(self.friends_frame, bg='lightgray')
        self.friends_list.pack(fill='both', expand=True)
        self.friends_canvas = tk.Canvas(self.friends_list, bg='lightgray')
        self.friends_scrollbar = tk.Scrollbar(self.friends_list, orient="vertical", command=self.friends_canvas.yview)
        self.scrollable_friends_frame = tk.Frame(self.friends_canvas, bg='lightgray')
        self.scrollable_friends_frame.bind(
            "<Configure>",
            lambda e: self.friends_canvas.configure(scrollregion=self.friends_canvas.bbox("all"))
        )
        self.friends_canvas.create_window((0, 0), window=self.scrollable_friends_frame, anchor="nw")
        self.friends_canvas.pack(side="left", fill="both", expand=True)
        self.friends_scrollbar.pack(side="right", fill="y")
        self.friends_canvas.configure(yscrollcommand=self.friends_scrollbar.set)

    def update_friends_list(self):
        for widget in self.scrollable_friends_frame.winfo_children():
            widget.destroy()

        if hasattr(self, 'steam_user'):
            friend_ids = self.steam_user.friend_ids
            friend_summaries = self.steam_user.get_player_summaries(friend_ids)
            online_friends = []
            offline_friends = []

            for friend in friend_summaries:
                friend_name = friend.get('personaname', 'Unknown')
                game_playing = friend.get('gameextrainfo', None)
                status = "Online" if friend.get('personastate', 0) > 0 else "Offline"
                if status == "Online":
                    if game_playing:
                        online_friends.append((friend_name, f"Playing {game_playing}"))
                    else:
                        online_friends.append((friend_name, "Online"))
                else:
                    offline_friends.append((friend_name, "Offline"))

            for friend_name, status in online_friends:
                friend_label = tk.Label(self.scrollable_friends_frame, text=f"{friend_name}: {status}", bg='lightgray', anchor='w')
                friend_label.pack(fill='x', padx=5, pady=2)

            for friend_name, status in offline_friends:
                friend_label = tk.Label(self.scrollable_friends_frame, text=f"{friend_name}: {status}", bg='lightgray', anchor='w')
                friend_label.pack(fill='x', padx=5, pady=2)

    def update_activities(self):
        activities = self.get_activities(self.steam_user.steam_id)
        for i, label in enumerate(self.activity_labels):
            if i < len(activities):
                activity_text = f"{activities[i][0]} - {activities[i][1]}"
                label.config(text=activity_text)
            else:
                label.config(text="")
        self.after(60000, self.update_activities)

    def add_game(self):
        game_name = simpledialog.askstring("New Game", "Enter the name of your new game:")
        if game_name:
            self.custom_game = CustomGame(self, self.steam_user, game_name)
            self.custom_game.add_game(game_name)
            self.refresh_library()

    def on_select(self, event):
        selected_index = self.GameListbox.curselection()
        if selected_index:
            selected_game = self.filtered_games[selected_index[0]]
            if 'appid' not in selected_game:
                self.custom_game = CustomGame(self, self.steam_user, selected_game['name'])
            else:
                app_id = selected_game['appid']
                achievements, schema_dict = self.steam_user.get_game_achievements(app_id)
                user_achievements = {ach['apiname']: ach for ach in achievements if ach['achieved'] == 1}
                friends_with_achievement = {achievement: [] for achievement in user_achievements}
                for friend_id in self.steam_user.friend_ids:
                    friend_achievements = self.steam_user.get_friend_achievements(friend_id, app_id)
                    for friend_achievement in friend_achievements:
                        if friend_achievement['achieved'] == 1 and friend_achievement['apiname'] in user_achievements:
                            friends_with_achievement[friend_achievement['apiname']].append(friend_id)
                self.show_achievements_window(selected_game['name'], schema_dict, user_achievements, friends_with_achievement)

    def show_achievements_window(self, game_name, schema_dict, user_achievements, friends_with_achievement):
        self.achievements_frame = AchievementsFrame(
            self.container,
            self.steam_user,
            game_name,
            schema_dict,
            user_achievements,
            friends_with_achievement
        )
        self.achievements_frame.tkraise()

    def toggle_sort_options(self):
        if self.sort_buttons_visible:
            self.hide_sort_buttons()
        else:
            self.show_sort_buttons()

    def show_sort_buttons(self):
        self.AscButton.place(relx=0.4, rely=0.75, anchor='center')
        self.DescButton.place(relx=0.6, rely=0.75, anchor='center')
        self.MostPlayedButton.place(relx=0.4, rely=0.8, anchor='center')
        self.LeastPlayedButton.place(relx=0.6, rely=0.8, anchor='center')
        self.RecentlyPlayedButton.place(relx=0.5, rely=0.85, anchor='center')
        self.sort_buttons_visible = True

    def hide_sort_buttons(self):
        self.AscButton.place_forget()
        self.DescButton.place_forget()
        self.MostPlayedButton.place_forget()
        self.LeastPlayedButton.place_forget()
        self.RecentlyPlayedButton.place_forget()
        self.sort_buttons_visible = False

    def logout(self):
        self.container.showFrame('LoginPage')
        self.clear_game_list()

    def clear_game_list(self):
        self.GameListbox.delete(0, tk.END)
